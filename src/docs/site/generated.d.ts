/**
* This is an autogenerated file created by the Stencil compiler.
* It contains typing information for all components that exist in this project.
*/
/* tslint:disable */

import { JSXElements } from '@stencil/core';

import '@stencil/router'
import '@stencil/state-tunnel'
import {
  MatchResults,
} from '@stencil/router';


export namespace StencilComponents {

  interface FooterBar {}
  interface FooterBarAttributes extends JSXElements.HTMLAttributes {}

  interface HeaderBar {
    'isSearchVisible': boolean;
    'query': string;
    'version': string;
  }
  interface HeaderBarAttributes extends JSXElements.HTMLAttributes {
    'isSearchVisible'?: boolean;
    'onToggleHeaderSearch'?: (event: CustomEvent) => void;
    'query'?: string;
    'version'?: string;
  }

  interface IconList {
    'data': any;
    'query': string;
  }
  interface IconListAttributes extends JSXElements.HTMLAttributes {
    'data'?: any;
    'query'?: string;
  }

  interface IconSearch {
    'autofocus': string;
    'query': string;
    'size': string;
  }
  interface IconSearchAttributes extends JSXElements.HTMLAttributes {
    'autofocus'?: string;
    'onHasSearched'?: (event: CustomEvent) => void;
    'query'?: string;
    'size'?: string;
  }

  interface IoniconsSite {}
  interface IoniconsSiteAttributes extends JSXElements.HTMLAttributes {}

  interface LandingPage {
    'data': any;
    'query': string;
  }
  interface LandingPageAttributes extends JSXElements.HTMLAttributes {
    'data'?: any;
    'query'?: string;
  }

  interface NotfoundPage {}
  interface NotfoundPageAttributes extends JSXElements.HTMLAttributes {}

  interface ToastBar {
    'selectedIcon': {
      name: string,
      icons: string[],
      tags: string[]
    };
    'selectedIconType': string;
  }
  interface ToastBarAttributes extends JSXElements.HTMLAttributes {
    'onClearToast'?: (event: CustomEvent) => void;
    'onToggleHeaderSearch'?: (event: CustomEvent) => void;
    'selectedIcon'?: {
      name: string,
      icons: string[],
      tags: string[]
    };
    'selectedIconType'?: string;
  }

  interface UsagePage {
    'data': any;
    'match': MatchResults;
  }
  interface UsagePageAttributes extends JSXElements.HTMLAttributes {
    'data'?: any;
    'match'?: MatchResults;
  }
}

export interface LocalIntrinsicElements {
  'footer-bar': StencilComponents.FooterBarAttributes;
  'header-bar': StencilComponents.HeaderBarAttributes;
  'icon-list': StencilComponents.IconListAttributes;
  'icon-search': StencilComponents.IconSearchAttributes;
  'ionicons-site': StencilComponents.IoniconsSiteAttributes;
  'landing-page': StencilComponents.LandingPageAttributes;
  'notfound-page': StencilComponents.NotfoundPageAttributes;
  'toast-bar': StencilComponents.ToastBarAttributes;
  'usage-page': StencilComponents.UsagePageAttributes;
}

declare global {

  interface HTMLFooterBarElement extends StencilComponents.FooterBar, HTMLStencilElement {}
  var HTMLFooterBarElement: {
    prototype: HTMLFooterBarElement;
    new (): HTMLFooterBarElement;
  };

  interface HTMLHeaderBarElement extends StencilComponents.HeaderBar, HTMLStencilElement {}
  var HTMLHeaderBarElement: {
    prototype: HTMLHeaderBarElement;
    new (): HTMLHeaderBarElement;
  };

  interface HTMLIconListElement extends StencilComponents.IconList, HTMLStencilElement {}
  var HTMLIconListElement: {
    prototype: HTMLIconListElement;
    new (): HTMLIconListElement;
  };

  interface HTMLIconSearchElement extends StencilComponents.IconSearch, HTMLStencilElement {}
  var HTMLIconSearchElement: {
    prototype: HTMLIconSearchElement;
    new (): HTMLIconSearchElement;
  };

  interface HTMLIoniconsSiteElement extends StencilComponents.IoniconsSite, HTMLStencilElement {}
  var HTMLIoniconsSiteElement: {
    prototype: HTMLIoniconsSiteElement;
    new (): HTMLIoniconsSiteElement;
  };

  interface HTMLLandingPageElement extends StencilComponents.LandingPage, HTMLStencilElement {}
  var HTMLLandingPageElement: {
    prototype: HTMLLandingPageElement;
    new (): HTMLLandingPageElement;
  };

  interface HTMLNotfoundPageElement extends StencilComponents.NotfoundPage, HTMLStencilElement {}
  var HTMLNotfoundPageElement: {
    prototype: HTMLNotfoundPageElement;
    new (): HTMLNotfoundPageElement;
  };

  interface HTMLToastBarElement extends StencilComponents.ToastBar, HTMLStencilElement {}
  var HTMLToastBarElement: {
    prototype: HTMLToastBarElement;
    new (): HTMLToastBarElement;
  };

  interface HTMLUsagePageElement extends StencilComponents.UsagePage, HTMLStencilElement {}
  var HTMLUsagePageElement: {
    prototype: HTMLUsagePageElement;
    new (): HTMLUsagePageElement;
  };

  interface HTMLElementTagNameMap {
    'footer-bar': HTMLFooterBarElement
    'header-bar': HTMLHeaderBarElement
    'icon-list': HTMLIconListElement
    'icon-search': HTMLIconSearchElement
    'ionicons-site': HTMLIoniconsSiteElement
    'landing-page': HTMLLandingPageElement
    'notfound-page': HTMLNotfoundPageElement
    'toast-bar': HTMLToastBarElement
    'usage-page': HTMLUsagePageElement
  }

  interface ElementTagNameMap {
    'footer-bar': HTMLFooterBarElement;
    'header-bar': HTMLHeaderBarElement;
    'icon-list': HTMLIconListElement;
    'icon-search': HTMLIconSearchElement;
    'ionicons-site': HTMLIoniconsSiteElement;
    'landing-page': HTMLLandingPageElement;
    'notfound-page': HTMLNotfoundPageElement;
    'toast-bar': HTMLToastBarElement;
    'usage-page': HTMLUsagePageElement;
  }
}


import { DefaultIntrinsicElements } from '@stencil/core';

declare global {
  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends LocalIntrinsicElements, DefaultIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends JSXElements.HTMLAttributes {}
}

